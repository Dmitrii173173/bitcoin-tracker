# Используем официальный образ Node.js
FROM node:18-alpine AS builder

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем файлы package.json и package-lock.json
COPY package*.json ./

# Проверяем содержимое package.json
RUN cat package.json

# Устанавливаем зависимости
RUN npm install

# Устанавливаем типы для Node.js
RUN npm install --save-dev @types/node

# Выводим доступные скрипты
RUN npm run

# Копируем остальные файлы проекта
COPY . .

# Выводим информацию о структуре проекта перед сборкой
RUN echo "==== Before build ====" && ls -la

# Создаем директорию для данных
RUN mkdir -p public/data
# Используем команду shell вместо COPY для безопасного копирования
RUN if [ -d "data" ]; then cp -r data/* public/data/ 2>/dev/null || true; fi

# Собираем приложение
RUN npm run build

# Проверяем, где созданы файлы сборки
RUN echo "==== After build ====" && ls -la && \
    echo "==== .output folder structure ====" && find .output -type f | sort

# Создаем простой Express сервер для раздачи статических файлов
RUN echo 'const express = require("express"); \
const path = require("path"); \
const fs = require("fs"); \
const { createProxyMiddleware } = require("http-proxy-middleware"); \
const app = express(); \
const PORT = process.env.PORT || 80; \
\
// Настройка прокси для API запросов \
app.use("/api", createProxyMiddleware({ \
  target: process.env.BACKEND_URL || "http://backend:3001", \
  changeOrigin: true, \
  pathRewrite: { "^/api": "/api" } \
})); \
\
// Проверяем наличие папок для статических файлов \
const outputPublicPath = path.join(__dirname, ".output/public"); \
const outputPath = path.join(__dirname, ".output"); \
\
// Логирование для отладки \
console.log("Проверка путей:"); \
console.log("- .output/public exists:", fs.existsSync(outputPublicPath)); \
console.log("- .output exists:", fs.existsSync(outputPath)); \
\
if (fs.existsSync(outputPublicPath)) { \
  console.log("Используем папку .output/public для статических файлов"); \
  app.use(express.static(outputPublicPath)); \
  \
  // Для SPA - направляем все запросы на index.html \
  app.get("*", (req, res) => { \
    const indexPath = path.join(outputPublicPath, "index.html"); \
    if (fs.existsSync(indexPath)) { \
      res.sendFile(indexPath); \
    } else { \
      res.status(404).send("Файл index.html не найден в .output/public"); \
    } \
  }); \
} else if (fs.existsSync(outputPath)) { \
  // Если нет папки public, используем корневую .output \
  console.log("Используем папку .output для статических файлов"); \
  app.use(express.static(outputPath)); \
  \
  // Для SPA - направляем все запросы на index.html \
  app.get("*", (req, res) => { \
    const indexPath = path.join(outputPath, "index.html"); \
    if (fs.existsSync(indexPath)) { \
      res.sendFile(indexPath); \
    } else { \
      // Если index.html не найден, мы можем иметь дело с SSR \
      res.status(404).send("Это приложение Nuxt.js с SSR, но прямой запуск index.html не поддерживается в этой конфигурации. Используйте server/index.mjs вместо этого скрипта."); \
    } \
  }); \
} else { \
  console.error("ОШИБКА: Не найдены папки .output/public или .output"); \
  app.get("*", (req, res) => { \
    res.status(500).send("Ошибка конфигурации: Папки .output/public или .output не найдены"); \
  }); \
} \
\
// Запускаем сервер \
app.listen(PORT, () => { \
  console.log(`Фронтенд сервер запущен на порту ${PORT}`); \
});' > server.js

# Устанавливаем дополнительные зависимости для сервера
RUN npm install express http-proxy-middleware --save

# Запускаем на том же образе
FROM node:18-alpine

# Устанавливаем рабочую директорию
WORKDIR /app

# Устанавливаем переменные окружения
ENV NODE_ENV=production
ENV PORT=80
ENV BACKEND_URL=http://backend:3001

# Копируем только необходимые файлы из builder
COPY --from=builder /app/.output ./.output
COPY --from=builder /app/server.js ./server.js
COPY --from=builder /app/package.json ./package.json

# Устанавливаем только production зависимости
RUN npm install --omit=dev
RUN npm install express http-proxy-middleware --save

# Открываем порт
EXPOSE 80

# Запускаем сервер для статических файлов
CMD ["node", "server.js"] 